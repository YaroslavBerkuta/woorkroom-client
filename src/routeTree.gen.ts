/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RouteTreeImport } from './routes/routeTree'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as ClientRoutesImport } from './routes/client/routes'
import { Route as ClientclientImport } from './routes/client/__client'
import { Route as AuthauthImport } from './routes/auth/__auth'

// Create Virtual Routes

const ClientImport = createFileRoute('/client')()

// Create/Update Routes

const ClientRoute = ClientImport.update({
  id: '/client',
  path: '/client',
  getParentRoute: () => rootRoute,
} as any)

const RouteTreeRoute = RouteTreeImport.update({
  id: '/routeTree',
  path: '/routeTree',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const ClientRoutesRoute = ClientRoutesImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => ClientRoute,
} as any)

const ClientclientRoute = ClientclientImport.update({
  id: '/__client',
  getParentRoute: () => ClientRoute,
} as any)

const AuthauthRoute = AuthauthImport.update({
  id: '/__auth',
  getParentRoute: () => AuthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/routeTree': {
      id: '/routeTree'
      path: '/routeTree'
      fullPath: '/routeTree'
      preLoaderRoute: typeof RouteTreeImport
      parentRoute: typeof rootRoute
    }
    '/auth/__auth': {
      id: '/auth/__auth'
      path: ''
      fullPath: '/auth'
      preLoaderRoute: typeof AuthauthImport
      parentRoute: typeof AuthRouteImport
    }
    '/client': {
      id: '/client'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ClientImport
      parentRoute: typeof rootRoute
    }
    '/client/__client': {
      id: '/client/__client'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ClientclientImport
      parentRoute: typeof ClientRoute
    }
    '/client/routes': {
      id: '/client/routes'
      path: '/routes'
      fullPath: '/client/routes'
      preLoaderRoute: typeof ClientRoutesImport
      parentRoute: typeof ClientImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthauthRoute: typeof AuthauthRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthauthRoute: AuthauthRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ClientRouteChildren {
  ClientclientRoute: typeof ClientclientRoute
  ClientRoutesRoute: typeof ClientRoutesRoute
}

const ClientRouteChildren: ClientRouteChildren = {
  ClientclientRoute: ClientclientRoute,
  ClientRoutesRoute: ClientRoutesRoute,
}

const ClientRouteWithChildren =
  ClientRoute._addFileChildren(ClientRouteChildren)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthauthRoute
  '/routeTree': typeof RouteTreeRoute
  '/client': typeof ClientclientRoute
  '/client/routes': typeof ClientRoutesRoute
}

export interface FileRoutesByTo {
  '/auth': typeof AuthauthRoute
  '/routeTree': typeof RouteTreeRoute
  '/client': typeof ClientclientRoute
  '/client/routes': typeof ClientRoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/routeTree': typeof RouteTreeRoute
  '/auth/__auth': typeof AuthauthRoute
  '/client': typeof ClientRouteWithChildren
  '/client/__client': typeof ClientclientRoute
  '/client/routes': typeof ClientRoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth' | '/routeTree' | '/client' | '/client/routes'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/routeTree' | '/client' | '/client/routes'
  id:
    | '__root__'
    | '/auth'
    | '/routeTree'
    | '/auth/__auth'
    | '/client'
    | '/client/__client'
    | '/client/routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  RouteTreeRoute: typeof RouteTreeRoute
  ClientRoute: typeof ClientRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  RouteTreeRoute: RouteTreeRoute,
  ClientRoute: ClientRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth",
        "/routeTree",
        "/client"
      ]
    },
    "/auth": {
      "filePath": "auth/route.ts",
      "children": [
        "/auth/__auth"
      ]
    },
    "/routeTree": {
      "filePath": "routeTree.ts"
    },
    "/auth/__auth": {
      "filePath": "auth/__auth.tsx",
      "parent": "/auth"
    },
    "/client": {
      "filePath": "client",
      "children": [
        "/client/__client",
        "/client/routes"
      ]
    },
    "/client/__client": {
      "filePath": "client/__client.tsx",
      "parent": "/client"
    },
    "/client/routes": {
      "filePath": "client/routes.ts",
      "parent": "/client"
    }
  }
}
ROUTE_MANIFEST_END */
